<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hello world 2</title>
      <link href="2021/05/03/hello-world-2/"/>
      <url>2021/05/03/hello-world-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从官网获取源码，设置模块，编译，替换<code>/usr/sbin/</code>下的二进制文件即可。</p><p>环境：阿里云轻量服务器1核2G，CentOS Linux release 7.6.1810 (Core)</p></blockquote><h3 id="1-安装源码安装需要的第三方包"><a href="#1-安装源码安装需要的第三方包" class="headerlink" title="1.安装源码安装需要的第三方包"></a>1.安装源码安装需要的第三方包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> gcc gcc-c++ <span class="token function">make</span> libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-去官网获取软件源码。"><a href="#2-去官网获取软件源码。" class="headerlink" title="2. 去官网获取软件源码。"></a>2. 去<a href="https://nginx.org/en/download.html">官网</a>获取软件源码。</h3><p>建议使用主线版本nginx。理由：<a href="http://webmotociclismo.com/questions/76/nginxde-zhu-xian-he-wen-ding-fen-zhi-zhi-jian-you-shi-yao-qu-bie">nginx的“主线”和“稳定”分支之间有什么区别？</a></p><p>进入一个你觉得合适的文件夹。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://nginx.org/download/nginx-1.17.3.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> xzfv nginx-1.17.3.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入解压文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> nginx-1.17.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-查看对应configure"><a href="#3-查看对应configure" class="headerlink" title="3. 查看对应configure"></a>3. 查看对应configure</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@nginx ~<span class="token punctuation">]</span><span class="token comment"># nginx -V</span>nginx version: nginx/1.17.3built by gcc <span class="token number">4.8</span>.5 <span class="token number">20150623</span> <span class="token punctuation">(</span>Red Hat <span class="token number">4.8</span>.5-36<span class="token punctuation">)</span> <span class="token punctuation">(</span>GCC<span class="token punctuation">)</span> built with OpenSSL <span class="token number">1.0</span>.2k-fips  <span class="token number">26</span> Jan <span class="token number">2017</span>TLS SNI support enabledconfigure arguments: --prefix<span class="token operator">=</span>/etc/nginx --sbin-path<span class="token operator">=</span>/usr/sbin/nginx <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>--add-module<span class="token operator">=</span>/usr/local/src/ngx_cache_purge-2.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-增加对应的模块"><a href="#4-增加对应的模块" class="headerlink" title="4. 增加对应的模块"></a>4. 增加对应的模块</h3><p>以<code>ngx_cache_purge-2.3</code>为例复制<code>nginx -V</code>之后出现的configure arguments:的内容，在前头加上./configure  ，在后头加上–add-module=<code>..../ngx_cache_purge-2.3</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure --prefix<span class="token operator">=</span>/etc/nginx --sbin-path<span class="token operator">=</span>/usr/sbin/nginx --modules-path<span class="token operator">=</span>/usr/lib64/nginx/modules --conf-path<span class="token operator">=</span>/etc/nginx/nginx.conf --error-log-path<span class="token operator">=</span>/var/log/nginx/error.log --http-log-path<span class="token operator">=</span>/var/log/nginx/access.log --pid-path<span class="token operator">=</span>/var/run/nginx.pid --lock-path<span class="token operator">=</span>/var/run/nginx.lock --http-client-body-temp-path<span class="token operator">=</span>/var/cache/nginx/client_temp --http-proxy-temp-path<span class="token operator">=</span>/var/cache/nginx/proxy_temp --http-fastcgi-temp-path<span class="token operator">=</span>/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path<span class="token operator">=</span>/var/cache/nginx/uwsgi_temp --http-scgi-temp-path<span class="token operator">=</span>/var/cache/nginx/scgi_temp --user<span class="token operator">=</span>nginx --group<span class="token operator">=</span>nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt<span class="token operator">=</span><span class="token string">'-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC'</span> --with-ld-opt<span class="token operator">=</span><span class="token string">'-Wl,-z,relro -Wl,-z,now -pie'</span> --add-module<span class="token operator">=</span>/usr/local/src/ngx_cache_purge-2.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-编译"><a href="#5-编译" class="headerlink" title="5. 编译"></a>5. 编译</h3><p>make就好，不需要make install</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-对与二进制文件进行备份与替换"><a href="#6-对与二进制文件进行备份与替换" class="headerlink" title="6. 对与二进制文件进行备份与替换"></a>6. 对与二进制文件进行备份与替换</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/sbin/nginx /usr/sbin/nginx.old <span class="token comment">#备份原nginx文件</span><span class="token function">cp</span> ./objs/nginx /usr/sbin/nginx       <span class="token comment">#替换nginx文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-重启升级或者平滑升级"><a href="#7-重启升级或者平滑升级" class="headerlink" title="7. 重启升级或者平滑升级"></a>7. 重启升级或者平滑升级</h3><p><strong>重启升级</strong></p><p>nginx会关闭一会，网站会在很短的时间内无法访问。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart nginx    <span class="token comment">#重启 nginx 服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>平滑升级</strong></p><p>杀掉旧进程，过程中网站可以依旧可以正常访问。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@nginx objs<span class="token punctuation">]</span><span class="token comment"># ps -ef|grep nginx</span>root       <span class="token number">888</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">22</span>:01 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.confwww        <span class="token number">891</span>   <span class="token number">888</span>  <span class="token number">0</span> <span class="token number">22</span>:01 ?        00:00:00 nginx: worker processwww        <span class="token number">892</span>   <span class="token number">888</span>  <span class="token number">0</span> <span class="token number">22</span>:01 ?        00:00:00 nginx: cache manager processroot      <span class="token number">7051</span>  <span class="token number">1967</span>  <span class="token number">0</span> <span class="token number">23</span>:49 pts/0    00:00:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto nginx<span class="token punctuation">[</span>root@nginx objs<span class="token punctuation">]</span><span class="token comment"># kill -USR2 888</span><span class="token punctuation">[</span>root@nginx objs<span class="token punctuation">]</span><span class="token comment"># ps -ef|grep nginx</span>root       <span class="token number">888</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">22</span>:01 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.confwww        <span class="token number">891</span>   <span class="token number">888</span>  <span class="token number">0</span> <span class="token number">22</span>:01 ?        00:00:00 nginx: worker processwww        <span class="token number">892</span>   <span class="token number">888</span>  <span class="token number">0</span> <span class="token number">22</span>:01 ?        00:00:00 nginx: cache manager processroot      <span class="token number">7053</span>   <span class="token number">888</span>  <span class="token number">0</span> <span class="token number">23</span>:49 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.confwww       <span class="token number">7054</span>  <span class="token number">7053</span>  <span class="token number">0</span> <span class="token number">23</span>:49 ?        00:00:00 nginx: worker processwww       <span class="token number">7055</span>  <span class="token number">7053</span>  <span class="token number">0</span> <span class="token number">23</span>:49 ?        00:00:00 nginx: cache manager processwww       <span class="token number">7056</span>  <span class="token number">7053</span>  <span class="token number">0</span> <span class="token number">23</span>:49 ?        00:00:00 nginx: cache loader processroot      <span class="token number">7058</span>  <span class="token number">1967</span>  <span class="token number">0</span> <span class="token number">23</span>:49 pts/0    00:00:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时新的master进程已经正常开启，但老的work进程也存在，所以我们使用下面的命令，将老的work进程发出平滑停止的信号，如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@nginx objs<span class="token punctuation">]</span><span class="token comment"># kill -WINCH 888</span><span class="token punctuation">[</span>root@nginx objs<span class="token punctuation">]</span><span class="token comment"># ps -ef|grep nginx</span>root       <span class="token number">888</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">22</span>:01 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.confroot      <span class="token number">7053</span>   <span class="token number">888</span>  <span class="token number">0</span> <span class="token number">23</span>:49 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.confwww       <span class="token number">7054</span>  <span class="token number">7053</span>  <span class="token number">0</span> <span class="token number">23</span>:49 ?        00:00:00 nginx: worker processwww       <span class="token number">7055</span>  <span class="token number">7053</span>  <span class="token number">0</span> <span class="token number">23</span>:49 ?        00:00:00 nginx: cache manager processroot      <span class="token number">7086</span>  <span class="token number">1967</span>  <span class="token number">0</span> <span class="token number">23</span>:51 pts/0    00:00:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，老的work进程已经停止，其实这一平滑升级的动作，对访问用户来说是完全感知不到，所以nginx热部署就已经完成了。</p><p>此时查看nginx版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@nginx ~<span class="token punctuation">]</span><span class="token comment"># nginx -V</span>nginx version: nginx/1.17.3built by gcc <span class="token number">4.8</span>.5 <span class="token number">20150623</span> <span class="token punctuation">(</span>Red Hat <span class="token number">4.8</span>.5-36<span class="token punctuation">)</span> <span class="token punctuation">(</span>GCC<span class="token punctuation">)</span> built with OpenSSL <span class="token number">1.0</span>.2k-fips  <span class="token number">26</span> Jan <span class="token number">2017</span>TLS SNI support enabledconfigure arguments: --prefix<span class="token operator">=</span>/etc/nginx --sbin-path<span class="token operator">=</span>/usr/sbin/nginx <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>--add-module<span class="token operator">=</span>/usr/local/src/ngx_cache_purge-2.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：如果在版本升级完成后，没有任何问题，需要关闭老的master进程的话，可以使用下面的命令：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@nginx objs<span class="token punctuation">]</span><span class="token comment"># kill -QUIT 888</span><span class="token punctuation">[</span>root@nginx objs<span class="token punctuation">]</span><span class="token comment"># ps -ef|grep nginx</span>root      <span class="token number">7053</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">23</span>:49 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.confwww       <span class="token number">7054</span>  <span class="token number">7053</span>  <span class="token number">0</span> <span class="token number">23</span>:49 ?        00:00:00 nginx: worker processwww       <span class="token number">7055</span>  <span class="token number">7053</span>  <span class="token number">0</span> <span class="token number">23</span>:49 ?        00:00:00 nginx: cache manager processroot      <span class="token number">7089</span>  <span class="token number">1967</span>  <span class="token number">0</span> <span class="token number">23</span>:51 pts/0    00:00:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>nginx的进程也可以通过nginx.pid获得</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@nginx objs]# find &#x2F; -name &quot;nginx.pid&quot; -print&#x2F;run&#x2F;nginx.pid[root@nginx objs]# cat &#x2F;run&#x2F;nginx.pid945[root@nginx objs]# kill -USR2 &#96;cat &#x2F;run&#x2F;nginx.pid&#96;[root@nginx objs]# kill -WINCH &#96;cat &#x2F;run&#x2F;nginx.pid&#96;[root@nginx objs]# kill -QUIT &#96;cat &#x2F;run&#x2F;nginx.pid&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>版本回滚</strong></p><p>对于升级来说，最难的不是升级，而是回滚，因为在实际生产环境回滚的机率是存在，比如：新版本由于某些未知bug导致与现有应用不兼容、或出现运行不稳定的情况等等。</p><p>所以，对运维工程师来说，故障回滚是重点。</p><p>在上面的结果中，我们也能看到老的master进程是一直存在，在没有手工关闭前，它是不会自已关闭的，这种设计是有好处的，好处就是为了升级新版本后，如果出现问题能及时快速的回滚到上一个稳定版本。</p><p>回滚也就是替换原nginx文件，重复一次升级。</p><p>参考网站：</p><p><a href="https://juejin.im/post/5c7c79596fb9a04a054064b5">1分钟搞定 Nginx 版本的平滑升级与回滚  作者：民工哥技术之路链接</a></p><p><a href="https://www.jianshu.com/p/b9e02251e483">centos yum 安装nginx 后增加模块   作者：Aries_Li</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/03/hello-world/"/>
      <url>2021/05/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
